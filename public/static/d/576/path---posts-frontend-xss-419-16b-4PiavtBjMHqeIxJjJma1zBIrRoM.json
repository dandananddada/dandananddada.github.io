{"data":{"markdownRemark":{"html":"<p>One of the central tenets of REST is that a given object can have multiple representations.  For human consumption, an object might be rendered as HTML, PDF, video, etc.  For machine consumption, an object might be rendered as XML or JSON.  Indeed, within those broad categories, an object might have many different representations.</p>\n<p>There are two kinds of content negotiation which are possible in HTTP: <strong>server-driven</strong> and <strong>agent-driven negotiation</strong>. These two kinds of negotiation are orthogonal and thus may be used separately or in combination. </p>\n<h3>Server-driven Negotiation</h3>\n<p>If the selection of the best representation for a response is made by an algorithm located at the server, it is called server-driven negotiation.</p>\n<p>When a client sends an HTTP request, it may specify the media types that it can accept via an Accept header like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"readme\"><pre class=\"language-readme\"><code class=\"language-readme\">Accept: text/xml, application/xml, application/json</code></pre></div>\n<p>A client may also include vendor-specific media types like</p>\n<div class=\"gatsby-highlight\" data-language=\"readme\"><pre class=\"language-readme\"><code class=\"language-readme\">application/vnd.ims.lis.v1.person+json\napplication/vnd.sif.v2.studentpersonal+json</code></pre></div>\n<p>If no Accept header is present, the server is free to deliver whatever representation it thinks is best.</p>\n<p> When an Accept header is present, the server can </p>\n<ol>\n<li>return one of the representations from the list directly in the HTTP response</li>\n<li>redirect to a different URL that contains one of the requested representations, or send a 415 error (Unsupported Media Type).</li>\n</ol>\n<p>HTTP/1.1 includes the following request-header fields for enabling server-driven negotiation through description of user agent capabilities and user preferences: <code class=\"language-text\">Accept</code>, <code class=\"language-text\">Accept-Charset</code>, <code class=\"language-text\">Accept-Encoding</code>, <code class=\"language-text\">Accept-Language</code>, and <code class=\"language-text\">User-Agent</code>.</p>\n<h4>Server-Driven negotiation has a number of disadvantages</h4>\n<p>It is impossible for the server to determine accurately what might be the \"best\" representation for any given client, especially if it does not receive an Accept header. </p>\n<h3>Agent-driven Negotiation</h3>\n<p>With agent driven negotiation, the client does not provide an Accept header. Instead, the client simply issues an HTTP request to the URL for an object.  If the server supports only one representation for the object, that representation is returned immediately.  Otherwise, the server returns a list of available representations in the response where each representation is identified by its own URI.  The client selects an appropriate representation and then issues a second HTTP request to one of the alternative URIs given in the response.</p>\n<p>The HTTP 1.1 specification does not prescribe a format for delivering the list of available representations. Fortunately, with RDF there is a widely accepted practice of identifying alternative representations of an object.</p>\n<p>Thus, a server that wishes to provide a list of alternate representations of an object could return a JSON-LD payload like the one shown below.</p>\n<div class=\"gatsby-highlight\" data-language=\"json-ld\"><pre class=\"language-json-ld\"><code class=\"language-json-ld\">{\n  &quot;@context&quot; : {\n    &quot;sameAs&quot; : &quot;http://www.w3.org/2002/07/owl#sameAs&quot;,\n    &quot;format&quot; : &quot;http://purl.org/dc/elements/1.1/format&quot;\n  },\n  &quot;@id&quot; : &quot;http://server.example.com/resources/Person/1b16b1c3-a713-44cd-9bb2-0a59bb1117de&quot;\n  &quot;sameAs&quot; : [\n    { &quot;@id&quot; : &quot;http://server.example.com/resources/Person/1b16b1c3-a713-44cd-9bb2-0a59bb1117de/ims&quot;,\n      &quot;format&quot; : &quot;application/vnd.ims.lis.v1.person&quot;\n    },\n    { &quot;@id&quot; : &quot;http://server.example.com/resources/Person/1b16b1c3-a713-44cd-9bb2-0a59bb1117de/sif&quot;,\n      &quot;format&quot; : &quot;application/vnd.sif.v2.studentpersonal&quot;\n    }\n  ]\n}</code></pre></div>\n<h3>Transparent Negotiation</h3>\n<p>Transparent negotiation is a combination of both server-driven and agent-driven negotiation. When a cache is supplied with a form of the list of available representations of the response and the dimensions of variance are completely understood by the cache, then the cache becomes capable of performing server- driven negotiation on behalf of the origin server for subsequent requests on that resource.</p>","frontmatter":{"date":"July 01, 2019","path":"xss","category":"frontend","title":"XSS"}}},"pageContext":{"location":"xss","category":"frontend"}}