{"data":{"markdownRemark":{"html":"<p>vim编辑器的介绍这里就不详细说了，对于不是十分了解的人，这里简单说明下vim是有两种模式的，编辑模式和命令模式。</p>\n<p>在命令模式下通过命令可以快速的选取、操作文本，也就是其他编辑器的快捷键功能，但vim的命令模式会更加复杂强大一些。</p>\n<p>编辑模式就是正常的代码编写，文本录入了。两种模式可以通过快捷键进行切换。</p>\n<p>另外vim本身的功能毕竟有限，尚不足以与IDE比较，但是vim本身存在很多第三方插件，可以选择性拓展。根据具体的语言和插件选择，vim完全可以成为一个强大的开发工具。</p>\n<h3>常用快捷键</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">快捷键</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">h</td>\n<td align=\"left\">向左移动光标</td>\n</tr>\n<tr>\n<td align=\"left\">l</td>\n<td align=\"left\">向右移动光标</td>\n</tr>\n<tr>\n<td align=\"left\">j</td>\n<td align=\"left\">向下移动光标</td>\n</tr>\n<tr>\n<td align=\"left\">k</td>\n<td align=\"left\">向上移动光标</td>\n</tr>\n<tr>\n<td align=\"left\">w</td>\n<td align=\"left\">光标移动到下一个单词首字母</td>\n</tr>\n<tr>\n<td align=\"left\">b</td>\n<td align=\"left\">光标移动到上一个单词首字母</td>\n</tr>\n<tr>\n<td align=\"left\">e</td>\n<td align=\"left\">光标移动到下一个单词最后一个字母</td>\n</tr>\n<tr>\n<td align=\"left\">shift+5</td>\n<td align=\"left\">找到'()','[]','{}'匹配项位置</td>\n</tr>\n<tr>\n<td align=\"left\">gg</td>\n<td align=\"left\">光标移动到文件开始</td>\n</tr>\n<tr>\n<td align=\"left\">G</td>\n<td align=\"left\">光标移动到文件结束</td>\n</tr>\n<tr>\n<td align=\"left\">12G</td>\n<td align=\"left\">光标移动到第12行</td>\n</tr>\n<tr>\n<td align=\"left\">12gg</td>\n<td align=\"left\">光标移动到第12行</td>\n</tr>\n<tr>\n<td align=\"left\">/text</td>\n<td align=\"left\">查找文件中text关键字，按n查询下一个,N查询上一个</td>\n</tr>\n<tr>\n<td align=\"left\">o</td>\n<td align=\"left\">在光标下一行位置插入段落并进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">O</td>\n<td align=\"left\">在光标上一行位置插入段落并进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">i</td>\n<td align=\"left\">在光标当前位置左侧进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">I</td>\n<td align=\"left\">在光标当前段落开始处位置进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">a</td>\n<td align=\"left\">在光标当前位置右侧进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">A</td>\n<td align=\"left\">在光标当前段落结束处位置进入编辑模式</td>\n</tr>\n<tr>\n<td align=\"left\">x</td>\n<td align=\"left\">删除光标当前位置处字符</td>\n</tr>\n<tr>\n<td align=\"left\">X</td>\n<td align=\"left\">删除光标当前位置处前一个字符</td>\n</tr>\n<tr>\n<td align=\"left\">d</td>\n<td align=\"left\">配合数字键和方向键可以选择光标位置处左右多个字符，上下多行</td>\n</tr>\n<tr>\n<td align=\"left\">D</td>\n<td align=\"left\">删除从光标位置开始到行尾全部字符</td>\n</tr>\n<tr>\n<td align=\"left\">r</td>\n<td align=\"left\">修改光标当前位置处字符</td>\n</tr>\n<tr>\n<td align=\"left\">R</td>\n<td align=\"left\">在当前光标位置出进入编辑模式，并逐次修改下面所有字符</td>\n</tr>\n<tr>\n<td align=\"left\">u</td>\n<td align=\"left\">撤销上一步操作</td>\n</tr>\n<tr>\n<td align=\"left\">crtl+r</td>\n<td align=\"left\">恢复上一步撤销</td>\n</tr>\n<tr>\n<td align=\"left\">U</td>\n<td align=\"left\">撤销当前行所有修改</td>\n</tr>\n<tr>\n<td align=\"left\">v</td>\n<td align=\"left\">选取光标所在位置字符，配合方向键可以选取多个字符或者行</td>\n</tr>\n<tr>\n<td align=\"left\">V</td>\n<td align=\"left\">选取当前行,配合方向键可以选取多行</td>\n</tr>\n<tr>\n<td align=\"left\">y</td>\n<td align=\"left\">复制光标所选中字符</td>\n</tr>\n<tr>\n<td align=\"left\">Y</td>\n<td align=\"left\">复制光标所在位置当前行</td>\n</tr>\n<tr>\n<td align=\"left\">p</td>\n<td align=\"left\">在光标所在位置后粘贴复制内容</td>\n</tr>\n<tr>\n<td align=\"left\">P</td>\n<td align=\"left\">在光标所在位置前粘贴复制内容</td>\n</tr>\n<tr>\n<td align=\"left\">J</td>\n<td align=\"left\">合并光标当前位置行与下一行</td>\n</tr>\n<tr>\n<td align=\"left\">H</td>\n<td align=\"left\">到屏幕顶端</td>\n</tr>\n<tr>\n<td align=\"left\">L</td>\n<td align=\"left\">到屏幕底端</td>\n</tr>\n<tr>\n<td align=\"left\">.</td>\n<td align=\"left\">重复上一次命令</td>\n</tr>\n<tr>\n<td align=\"left\">ggVG</td>\n<td align=\"left\">全选</td>\n</tr>\n<tr>\n<td align=\"left\">ddp</td>\n<td align=\"left\">当前行与下一行位置互换</td>\n</tr>\n<tr>\n<td align=\"left\">daw</td>\n<td align=\"left\">删除光标所在位置出单词,d2w删除光标所在位置及其后工两个单词，标点符号算一个单词</td>\n</tr>\n<tr>\n<td align=\"left\">esc</td>\n<td align=\"left\">退出编辑模式到命令模式</td>\n</tr>\n<tr>\n<td align=\"left\">:w</td>\n<td align=\"left\">保存当前修改</td>\n</tr>\n<tr>\n<td align=\"left\">:w!</td>\n<td align=\"left\">强制保存当前修改</td>\n</tr>\n<tr>\n<td align=\"left\">:q</td>\n<td align=\"left\">退出vim</td>\n</tr>\n<tr>\n<td align=\"left\">:q!</td>\n<td align=\"left\">强制退出vim</td>\n</tr>\n<tr>\n<td align=\"left\">:wq</td>\n<td align=\"left\">保存修改并退出vim</td>\n</tr>\n</tbody>\n</table>\n<h3>常用设置</h3>\n<p>以mac系统为例，vim相关文件会以隐藏文件存储在当前登录账户根目录下（Users/username），文件夹名称为.vim。</p>\n<p>vim的配置文件也以隐藏文件存储在当前登录账户的根目录下，文件名称为.vimrc。</p>\n<h4>文本设置</h4>\n<p>一般常用设置包括语法高亮、tab占位、设置行号显示、代码颜色、空格显示等。</p>\n<p>具体配置代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token string\">\"show number line\"</span>\n<span class=\"token keyword\">set</span> number\n\n<span class=\"token string\">\"set syntax heightlight for mac\"</span>\nsyntax on\n\n<span class=\"token string\">\"set markdown heightlight\"</span>\nautocmd FileType modula2 <span class=\"token keyword\">set</span> fl<span class=\"token operator\">=</span>\n\nfiletype plugin on\n\n<span class=\"token string\">\"set corret text indent by syntax\"</span>\nfiletype indent on\n\n<span class=\"token string\">\"set tab key as two space\"</span>\n<span class=\"token keyword\">set</span> expandtab\n<span class=\"token keyword\">set</span> tabstop<span class=\"token operator\">=</span><span class=\"token number\">2</span>\n<span class=\"token keyword\">set</span> shiftwidth<span class=\"token operator\">=</span><span class=\"token number\">2</span>\n\n<span class=\"token string\">\" Display extra whitespace as .\"</span>\n<span class=\"token keyword\">set</span> list listchars<span class=\"token operator\">=</span>tab<span class=\"token punctuation\">:</span>··<span class=\"token punctuation\">,</span>trail<span class=\"token punctuation\">:</span>·</code></pre></div>\n<h4>代码颜色设置</h4>\n<p>这里单独说明下代码颜色的设置，一般vim代码颜色文件都存放在。</p>\n<p>vim目录下的colors目录中。你可以在google或者github查找下载相关的vim代码配色，然后拷贝到该位置。其中关键词检索录入vim colorscheme即可。</p>\n<p>这里我使用的是github的配色，首先将配色文件拷贝到colors目录下。</p>\n<p>然后在.vimrc文件中加入如下语句，设置vim启动时采用的配色。</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"> colorscheme github</code></pre></div>\n<h3>常用插件</h3>\n<p>vim的插件一般分散都存放在.vim目录下，管理起来不是十分方便。</p>\n<p>这里为了方便插件的管理采用pathogen。</p>\n<h4><strong>pathogen</strong></h4>\n<p>在.vim目录下创建一个autoload文件夹和一个bundle文件夹。</p>\n<p>在autoload文件夹下获取到pathogen的配置文件:</p>\n<p><code class=\"language-text\">$ curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim</code></p>\n<p>然后在.vimrc配置文件中添加pathogen的启动方法:</p>\n<p><code class=\"language-text\">$ execute pathogen#infect()</code></p>\n<p>之后使用pathogen安装插件就简单多了，只需要在bundle中通过git将相关插件clone到本地即可。</p>\n<h4><strong>nerdtree</strong></h4>\n<p>nerdtree会将打开的文件所在的文件夹以树结构展现出来。</p>\n<p>进到.vim/bundle目录下，执行clone命令拷贝项目到本地:</p>\n<p><code class=\"language-text\">$ git clone https://github.com/scrooloose/nerdtree.git</code></p>\n<p>修改.vimrc文件:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"nerd tree\"</span>\nautocmd vimenter <span class=\"token operator\">*</span> NERDTree\nautocmd StdinReadPre <span class=\"token operator\">*</span> <span class=\"token keyword\">let</span> s<span class=\"token punctuation\">:</span>std_in<span class=\"token operator\">=</span><span class=\"token number\">1</span>\nautocmd VimEnter <span class=\"token operator\">*</span> <span class=\"token keyword\">if</span> <span class=\"token function\">argc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"s:std_in\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> NERDTree <span class=\"token operator\">|</span> endif\nautocmd bufenter <span class=\"token operator\">*</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">winnr</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"$\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">exists</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b:NERDTreeType\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">:</span>NERDTreeType <span class=\"token operator\">==</span> <span class=\"token string\">\"primary\"</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> q <span class=\"token operator\">|</span> endif\nmap <span class=\"token operator\">&lt;</span><span class=\"token constant\">C</span><span class=\"token operator\">-</span>n<span class=\"token operator\">></span> <span class=\"token punctuation\">:</span>NERDTreeToggle<span class=\"token operator\">&lt;</span><span class=\"token constant\">CR</span><span class=\"token operator\">></span></code></pre></div>\n<p>这样通过vim打开一个文件的时候默认就加载nerdtree插件，当你想隐藏的时候用组合键<code class=\"language-text\">ctrl+n</code>即可。</p>\n<h4><strong>Tagbar</strong></h4>\n<p>tagbar可以将你当前打开的文件的结构以索引目录的形式罗列出来。</p>\n<p>进到.vim/bundle目录下，执行clone命令拷贝项目到本地:</p>\n<p><code class=\"language-text\">$ git clone https://github.com/majutsushi/tagbar</code></p>\n<p>修改.vimrc文件:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>tagbar_width<span class=\"token operator\">=</span><span class=\"token number\">35</span>\n<span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>tagbar_autofocus<span class=\"token operator\">=</span><span class=\"token number\">1</span>\nnmap <span class=\"token operator\">&lt;</span><span class=\"token constant\">F8</span><span class=\"token operator\">></span> <span class=\"token punctuation\">:</span>TagbarToggle<span class=\"token operator\">&lt;</span><span class=\"token constant\">CR</span><span class=\"token operator\">></span>\nautocmd VimEnter <span class=\"token operator\">*</span> nested <span class=\"token punctuation\">:</span>call tagbar#<span class=\"token function\">autoopen</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这边默认配置是通过F8显示隐藏tagbar窗口，你也可以根据自己需求定义。</p>\n<h4><strong>ctrlp</strong></h4>\n<p>ctrlp可以帮助你快速查找打开文件，它默认会在你当前打开文件根目录搜索你键入关键字匹配的文件。</p>\n<p>进到.vim/bundle目录下，执行clone命令拷贝项目到本地:</p>\n<p><code class=\"language-text\">$ git clone https://github.com/kien/ctrlp.vim.git</code></p>\n<p>修改.vimrc文件:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"ctrlp, for file search\"</span>\n<span class=\"token keyword\">set</span> wildignore<span class=\"token operator\">+=</span><span class=\"token operator\">*</span><span class=\"token operator\">/</span>tmp<span class=\"token comment\">/*,*.so,*.swp,*.zip,*.png,*.jpg,*.jpeg,*.gif\nlet g:ctrlp_custom_ignore = '\\v[\\/]\\.(git|hg|svn)$'</span></code></pre></div>\n<h4><strong>tComment</strong></h4>\n<p>tComment是一款快速注释的插件，它可以根据你当前文件的语言自动决定注释语法。 </p>\n<p>进到.vim/bundle目录下，执行clone命令拷贝项目到本地:</p>\n<p><code class=\"language-text\">$ git clone https://github.com/vim-scripts/tComment.git</code></p>\n<p>tComment可以不做特殊配置直接使用。</p>\n<p>注释和取消注释的快捷键都是<code class=\"language-text\">ctrl+/+/</code>，你也可以选择多行然后执行注释命令进行多行注释。</p>\n<h4><strong>fugitive</strong></h4>\n<p>fugitive是一个git插件，它允许你在vim的命令模式下通过类似于git的命令执行git命令。</p>\n<p>比如可以通过<code class=\"language-text\">:Gstatus</code>执行<code class=\"language-text\">git status</code>命令，查看文件修改情况。</p>\n<p>进到.vim/bundle目录下，执行clone命令拷贝项目到本地:</p>\n<p><code class=\"language-text\">$ git clone https://github.com/tpope/vim-fugitive.git</code></p>\n<p>fugitive可以不做特殊配置直接使用。</p>\n<h4><strong>emmet-vim</strong></h4>\n<p>emmet是用来快速输入html代码的插件，emmet-vim是其在vim下的插件。</p>\n<p>进到.vim/bundle目录下，执行clone命令拷贝项目到本地:</p>\n<p><code class=\"language-text\">git clone https://github.com/mattn/emmet-vim.git</code></p>\n<p>不需要做额外的配置，再次重启vim就可以使用了。</p>\n<p>和在其他编辑器中不同，emmet的使用不再用tab出发，而是用组合键<code class=\"language-text\">ctrl+y+,</code>。</p>\n<p>如果你想自己定义组合键就在.vimrc中加入如下配置:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"emmet\"</span>\n<span class=\"token keyword\">let</span> g<span class=\"token punctuation\">:</span>user_emmet_leader_key<span class=\"token operator\">=</span><span class=\"token string\">'&lt;C-Z>'</span></code></pre></div>\n<p>这样触发emmet的组合键就变成<code class=\"language-text\">ctrl+z+,</code>了，但是<code class=\"language-text\">,</code>是必须要的，不能省略。</p>\n<h4><strong>vim-surround</strong></h4>\n<p>vim-surround是一个方便快速编辑父子层文本的插件，比如快速删除一个元素的外层元素，给一段文本添加div元素等。</p>\n<p>进到.vim/bundle目录下，执行clone命令拷贝项目到本地:</p>\n<p><code class=\"language-text\">$ git clone https://github.com/tpope/vim-surround.git</code></p>\n<p>重启vim就可以用surround的命令了，这里简单介绍几个个常用的:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">命令</th>\n<th align=\"right\">说明</th>\n<th align=\"center\">演示</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">cs\"'</td>\n<td align=\"right\">修改字符\"\"为''</td>\n<td align=\"center\"><code class=\"language-text\">&quot;hello world&quot;</code>\t执行命令<code class=\"language-text\">cs&quot;&#39;</code>后修改为\t<code class=\"language-text\">&#39;hello world&#39;</code></td>\n</tr>\n<tr>\n<td align=\"left\">ds\"</td>\n<td align=\"right\">删除包裹符号</td>\n<td align=\"center\"><code class=\"language-text\">&quot;hello world&quot;</code>\t执行命令<code class=\"language-text\">ds&quot;</code>后修改为\t<code class=\"language-text\">hello world</code></td>\n</tr>\n<tr>\n<td align=\"left\">cst</td>\n<td align=\"right\">修改父级元素</td>\n<td align=\"center\"><code class=\"language-text\">&lt;p&gt;hello world&lt;/p&gt;</code>\t执行命令<code class=\"language-text\">cst &lt;h1&gt;</code>后修改为 <code class=\"language-text\">&lt;h1&gt;hello world&lt;/h1&gt;</code></td>\n</tr>\n<tr>\n<td align=\"left\">dst</td>\n<td align=\"right\">删除父级元素</td>\n<td align=\"center\"><code class=\"language-text\">&lt;p&gt;hello world&lt;/p&gt;</code>\t执行命令<code class=\"language-text\">dst</code>后修改为 <code class=\"language-text\">hello world</code></td>\n</tr>\n<tr>\n<td align=\"left\">VS</td>\n<td align=\"right\">添加父级元素</td>\n<td align=\"center\"><code class=\"language-text\">hello world</code>\t执行命令<code class=\"language-text\">VS &lt;a&gt;</code>后修改为\t<code class=\"language-text\">&lt;a&gt;hello world&lt;/a&gt;</code></td>\n</tr>\n</tbody>\n</table>\n<h4><strong>delimitMate、matchit、auto-save</strong></h4>\n<p>delimitMate会自动帮你完成<code class=\"language-text\">&#39;</code>、<code class=\"language-text\">&quot;</code>、<code class=\"language-text\">(</code>、<code class=\"language-text\">[</code>、<code class=\"language-text\">{</code> 等符号的补全。</p>\n<p>matchit可以用<code class=\"language-text\">%</code>代替<code class=\"language-text\">shitf+F5</code>查找<code class=\"language-text\">&#39;</code>、<code class=\"language-text\">&quot;</code>、<code class=\"language-text\">(</code>、<code class=\"language-text\">[</code>、<code class=\"language-text\">{</code> 等对应符号。</p>\n<p>auto-save会在文件修改时自动保存，省去了反复执行<code class=\"language-text\">:w</code>命令。</p>","frontmatter":{"date":"May 05, 2015","path":"/vim","title":"Vim"}}},"pageContext":{}}