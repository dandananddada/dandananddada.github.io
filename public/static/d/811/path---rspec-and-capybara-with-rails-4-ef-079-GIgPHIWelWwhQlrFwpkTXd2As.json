{"data":{"markdownRemark":{"html":"<p>Rails本身是提供一套自动化测试体系的，对于比较小型或者时间短促的项目采用原生的测试体系也是可以的，当然第三方自动化测试插件语法、功能、开发上相对也会更加便捷一些。\n这里要介绍的插件有rspec-rail、capybara、factory<em>girl</em>rails、database_cleaner以及guard-rspec。</p>\n<p>【1】gems introduction</p>\n<p>首先简单对这些gems做一下介绍。\nrspec-rail 是一个自动化测试插件，github地址：<a href=\"https://github.com/rspec/rspec-rails%E3%80%82\">https://github.com/rspec/rspec-rails。</a>\ncapybara是一个集成测试插件，它提供了更加语义话的语法模拟用户操作，githbu地址：<a href=\"https://github.com/jnicklas/capybara%E3%80%82\">https://github.com/jnicklas/capybara。</a>\nfactory<em>girl</em>rails是用来替代rails fixtures的测试数据插件，gihubt地址：<a href=\"https://github.com/thoughtbot/factory_girl_rails%EF%BC%8C%E6%96%87%E6%A1%A3%E5%9C%B0%E5%9D%80%EF%BC%9Ahttps://github.com/thoughtbot/factory_girl/blob/master/GETTING_STARTED.md%E3%80%82\">https://github.com/thoughtbot/factory<em>girl</em>rails，文档地址：https://github.com/thoughtbot/factory<em>girl/blob/master/GETTING</em>STARTED.md。</a>\ndatabase<em>cleaner是用来清理数据库的插件，github地址：<a href=\"https://github.com/DatabaseCleaner/database\">https://github.com/DatabaseCleaner/database</a></em>cleaner\nguard-rspec是一个自动化运行工具，他会帮你监测文件修改，并自动执行测试用例。gihubt地址：<a href=\"https://github.com/guard/guard-rspec%E3%80%82\">https://github.com/guard/guard-rspec。</a></p>\n<p>【2】install gems\n在Gemfile中添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">group <span class=\"token symbol\">:development</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:test</span> <span class=\"token keyword\">do</span>\n  gem <span class=\"token string\">'rspec-rails'</span>\n<span class=\"token keyword\">end</span>\n\ngroup <span class=\"token symbol\">:test</span> <span class=\"token keyword\">do</span>\n\tgem <span class=\"token string\">'factory_girl_rails'</span>\n\tgem <span class=\"token string\">'capybara'</span>\n\tgem <span class=\"token string\">'guard-rspec'</span>\n\tgem <span class=\"token string\">'database_cleaner'</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>插件安装好后需要针对每一个插件进行一些必要的配置。</p>\n<p>【3】config gems</p>\n<p>1】执行如下命令安装rspec-rails\n<code class=\"language-text\">$ rails generate rspec:install</code>\n之后rspec会在项目根目录下创建一个spec目录以及一个rails<em>helper.rb文件和一个spec</em>helper.rb文件。\t下面内容将主要对rails_helper.rb文件进行配置。</p>\n<p>2】整合capybara和rspec，首先打开rails_helper.rb文件，你会看到文件头部有自动生成如下语句：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">ENV</span><span class=\"token punctuation\">[</span><span class=\"token string\">'RAILS_ENV'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span><span class=\"token operator\">=</span> <span class=\"token string\">'test'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'spec_helper'</span>\n<span class=\"token keyword\">require</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>expand_path<span class=\"token punctuation\">(</span><span class=\"token string\">'../../config/environment'</span><span class=\"token punctuation\">,</span> __FILE__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'rspec/rails'</span></code></pre></div>\n<p>在这段下面添加如下语句引入capybara，这样就在测试文件里引用capybara了。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'capybara/rspec'</span></code></pre></div>\n<p>但是目前还无法直接调用capybara的方法，还需要在rails_helper.rb中进一步配置。\n找到RSpec.configure代码段，并添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"> config<span class=\"token punctuation\">.</span>include <span class=\"token constant\">Capybara</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">DSL</span></code></pre></div>\n<p>这样就可以在测试类中调用Capybara的方法了。</p>\n<p>3】整合factory<em>girl</em>rails，这里factory<em>girl</em>rails可以采用support配置方式来整合，也可以像Capybara一样直接在rails<em>helper.rb中添加引用，我先说明引用方式的整合。\n同Capybara类似，在rails</em>helper.rb的RSpec.configure代码段中添加如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">config<span class=\"token punctuation\">.</span>include <span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Syntax</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Methods</span></code></pre></div>\n<p>这样就可以在测试文件中使用factory<em>girl的方法了。\n另外一种稍微复杂的方式是通过support整合，这里简单说明下如何配置，但是并不推荐，除非你有额外的需求需要配置。\n首先取消rails</em>helper.rb中这段代码的注释</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\">#Dir[Rails.root.join('spec/support/**/*.rb')].each { |f| require f }</span></code></pre></div>\n<p>接下来在spec目录下创建一个support目录，并添加factory_girls.rb文件，代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># spec/support/factory_girl.rb</span>\n<span class=\"token constant\">RSpec</span><span class=\"token punctuation\">.</span>configure <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>config<span class=\"token operator\">|</span>\n  config<span class=\"token punctuation\">.</span>include <span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Syntax</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Methods</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>这样也可以实现和第一种直接加代码段同样的效果（其实这种方式只是将配置抽离成文件形式而已）。\n最后在spec目录下添加factories.rb文件，这个文件就是factory<em>girl</em>rails用来维护测试数据的，也就是取代rails fixtures功能的文件。我会在稍后简单介绍如何使用。\n4】整合database<em>cleaner，同样在rails</em>helper.rb文件中加入database_cleaner的引入语句：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'database_cleaner'</span></code></pre></div>\n<p>5】初始化guard，在命令行执行如下命令：\n<code class=\"language-text\">$ guard init rspec</code>\n执行如下命令启动guard，监听测试文件的修改并执行测试用例：\n<code class=\"language-text\">$ guard</code>\n接下来就可以创建测试文件并实现测试方法进行测试了。</p>\n<p>【3】how to use rspec-rails</p>\n<p>因为rspec是整个测试过程中作为“容器”或者说做根本的插件，所以首先说明如何使用rspec。\n首先说明下，当你install rspec-rails后，再执行rails g 命名自动创建文件后，rspec-rails会帮你在spec目录下创建对应的测试文件，同时原本在test目录下创建的文件将不再自动生成。这个时候针对你要进行的不同测试选择对应的文件去编程就可以了。当然除此之外你也可以生成特定的测试文件，具体命令如下：\n生成单元测试文件，针对models进行测试：\n<code class=\"language-text\">$ rails g rspec:model your_model_test_name</code>\n生成功能测试文件，针对controllers进行测试：\n<code class=\"language-text\">$ rails g rspec:controller your_controller_test_name</code>\n生成集成测试文件，针对work flow进行测试：\n<code class=\"language-text\">$ rails g integration_test your_integration_test_name</code>\n对应不同的测试文件type也是不同的，但是测试用例的书写是一样的，具体定义如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">describe <span class=\"token string\">\"Your tes description\"</span> <span class=\"token keyword\">do</span>\n    it <span class=\"token string\">\"Your test case\"</span> <span class=\"token keyword\">do</span>\n      <span class=\"token comment\">#some operate</span>\n      expect<span class=\"token punctuation\">(</span>actual_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to expect_var\n    <span class=\"token keyword\">end</span>\n    \n    it <span class=\"token string\">\"Your another test case\"</span> <span class=\"token keyword\">do</span>\n      <span class=\"token comment\">#some operate</span>\n      expect<span class=\"token punctuation\">(</span>actual_var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to expect_var\n    <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>最后在命令行中输入如下语句检测测试文件是否通过\n<code class=\"language-text\">$ rspec spec/mdoels/your_model_test_case</code>\n也可以执行如下命令测试全部用例\n<code class=\"language-text\">$ rspec spec</code></p>\n<p>【4】with factory_girl for unit test</p>\n<p>从标题可以看出来，这部分要简单说明如何通过rspec和factory<em>girl一起对models进行单元测试。对models测试最核心的准备工作就是测试数据的维护，这里采用factory</em>girl来管理，首先说明factory_girl中的数据是如何定义的。\n之前提到过在spec目录下创建了一个factories.rb，这个文件就是存放原始测试数据的。这里以user为例简单示例代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">.</span>define <span class=\"token keyword\">do</span>\n\tfactory <span class=\"token symbol\">:user</span> <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>f<span class=\"token operator\">|</span>\n\t\tf<span class=\"token punctuation\">.</span>email <span class=\"token string\">\"admin@163.com\"</span>\n\t\tf<span class=\"token punctuation\">.</span>encrypted_password <span class=\"token string\">\"$2a$10$jJNRjL9XlQr4zhxwGCLUceiVtSX9X9GPeTTdoSjCTQ7eWnrePXwcK\"</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>其中:user就是一条记录的表示，而user代码段内就是对应的字段名称和值。当进行单元测试需要向数据库插入这个user记录时，在代码中通过如下语句实现：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">user <span class=\"token operator\">=</span> create<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"your_test_password\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>如果你没有在rspec配置文件中作factory_girl的配置，那么就需要直接调用FactoryGirl方法来插入数据了：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">user <span class=\"token operator\">=</span> <span class=\"token constant\">FatoryGirl</span><span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"your_test_password\"</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>【5】with capybara for integration test</p>\n<p>在写集成测试用例的时候通常会用capybara提供的语法来模拟用户操作，并预期结果进行对比。而在做单元测试（针对models）和功能测试（针对controllers）时用rspec-rails本身的语法就可以。这里简单通过一个登录例子来简单展示下capybara：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token constant\">RSpec</span><span class=\"token punctuation\">.</span>describe <span class=\"token string\">\"LoginTests\"</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:request</span> <span class=\"token keyword\">do</span>\n  describe <span class=\"token string\">\"GET /login_tests\"</span> <span class=\"token keyword\">do</span>\n  \tbefore <span class=\"token keyword\">do</span>\n  \t\t<span class=\"token variable\">@user</span> <span class=\"token operator\">=</span> create<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"admin1234\"</span><span class=\"token punctuation\">)</span>\n  \t<span class=\"token keyword\">end</span>\n\n    it <span class=\"token string\">\"works! (now write some real specs)\"</span> <span class=\"token keyword\">do</span>\n      <span class=\"token comment\"># user = build(:user)</span>\n      visit new_user_session_path\n      expect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_content<span class=\"token punctuation\">(</span><span class=\"token string\">\"后台管理\"</span><span class=\"token punctuation\">)</span>\n      fill_in <span class=\"token string\">'user_password'</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"admin1234\"</span>\n      page<span class=\"token punctuation\">.</span>find<span class=\"token punctuation\">(</span><span class=\"token string\">'.btn-primary'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>click\n      expect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_content<span class=\"token punctuation\">(</span><span class=\"token string\">\"首页\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"登陆失败\"</span>\n    <span class=\"token keyword\">end</span>\n  <span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>【6】auth by devise in tegration test</p>\n<p>当你用到devise作为登陆模块的时候，想要在集成测试中设置登陆权限时需要在rails<em>hepler.rb中添加Warden::Test::Helpers的引用，Warden是devise用来做登陆所依赖的gem，因为devise的方法无法在requests目录下很好的兼容，所以这里直接使用它底层依赖的gem进行登陆的设置。\n在rails</em>helper.rb顶部添加如下语句。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">include <span class=\"token constant\">Warden</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Test</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Helpers</span>     \n<span class=\"token constant\">Warden</span><span class=\"token punctuation\">.</span>test_mode<span class=\"token operator\">!</span></code></pre></div>\n<p>当需要在集成测试中添加登陆设置时，按照如下语句：</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"> let<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:admin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token variable\">@user</span> <span class=\"token operator\">=</span> create<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"admin1234\"</span><span class=\"token punctuation\">)</span>\n      login_as <span class=\"token variable\">@user</span><span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:user</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:run_callbacks</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">false</span>\n    <span class=\"token punctuation\">}</span></code></pre></div>\n<p>【7】javascript support by capybara-webkit\n这里capybara-webkit是一个capybara的浏览器gem，它可以提供capybara对js语句的自动执行，也就是说当你的测试类中需要测试js的时候就需要用到这个gem，其他提供该功能的gem还有selenium，poltergeist，capybara-webkit运行效率相对要高一些，但是因为它是基于qt的，所以如果你想采用capybara-webkit作为js的支持，那么首先要安装qt。最后当你在it中要测试js的时候记得设置js: true。</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\">  it <span class=\"token string\">\"a integration test for js\"</span><span class=\"token punctuation\">,</span> js<span class=\"token punctuation\">:</span> <span class=\"token keyword\">true</span> <span class=\"token keyword\">do</span>\n  <span class=\"token keyword\">end</span></code></pre></div>\n<p>更多用法请参考官方API<a href=\"http://www.rubydoc.info/github/jnicklas/capybara\">http://www.rubydoc.info/github/jnicklas/capybara</a></p>\n<p>【附录1】rails_helper.rb</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token comment\"># This file is copied to spec/ when you run 'rails generate rspec:install'</span>\n<span class=\"token constant\">ENV</span><span class=\"token punctuation\">[</span><span class=\"token string\">'RAILS_ENV'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">||</span><span class=\"token operator\">=</span> <span class=\"token string\">'test'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'spec_helper'</span>\n<span class=\"token keyword\">require</span> <span class=\"token builtin\">File</span><span class=\"token punctuation\">.</span>expand_path<span class=\"token punctuation\">(</span><span class=\"token string\">'../../config/environment'</span><span class=\"token punctuation\">,</span> __FILE__<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'rspec/rails'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'capybara/rspec'</span>\n<span class=\"token keyword\">require</span> <span class=\"token string\">'database_cleaner'</span>\n\n<span class=\"token comment\">#auth for integration test.</span>\ninclude <span class=\"token constant\">Warden</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Test</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Helpers</span>     \n<span class=\"token constant\">Warden</span><span class=\"token punctuation\">.</span>test_mode<span class=\"token operator\">!</span>\n\n<span class=\"token comment\"># If you are not using ActiveRecord, you can remove this line.</span>\n<span class=\"token comment\">#ActiveRecord::Migration.maintain_test_schema!</span>\n\n<span class=\"token constant\">RSpec</span><span class=\"token punctuation\">.</span>configure <span class=\"token keyword\">do</span> <span class=\"token operator\">|</span>config<span class=\"token operator\">|</span>\n  <span class=\"token comment\">#use Capybara in test files.</span>\n  config<span class=\"token punctuation\">.</span>include <span class=\"token constant\">Capybara</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">DSL</span>\n  <span class=\"token comment\">#support for javascript when integration test run.</span>\n  <span class=\"token constant\">Capybara</span><span class=\"token punctuation\">.</span>javascript_driver <span class=\"token operator\">=</span> <span class=\"token symbol\">:webkit</span>\n  <span class=\"token comment\">#use FactoryGirl in test files.</span>\n  config<span class=\"token punctuation\">.</span>include <span class=\"token constant\">FactoryGirl</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Syntax</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Methods</span>\n\n  <span class=\"token comment\">#use database_cleaner instead auto datas clear, for fix bugs in integration test.</span>\n  config<span class=\"token punctuation\">.</span>use_transactional_fixtures <span class=\"token operator\">=</span> <span class=\"token keyword\">false</span>\n  config<span class=\"token punctuation\">.</span>before<span class=\"token punctuation\">(</span><span class=\"token symbol\">:suite</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">do</span>\n    <span class=\"token constant\">DatabaseCleaner</span><span class=\"token punctuation\">.</span>clean_with <span class=\"token symbol\">:truncation</span>\n    <span class=\"token constant\">DatabaseCleaner</span><span class=\"token punctuation\">.</span>strategy <span class=\"token operator\">=</span> <span class=\"token symbol\">:transaction</span>\n  <span class=\"token keyword\">end</span>\n  <span class=\"token comment\">#include support conig file if you have</span>\n  <span class=\"token comment\">#config.infer_spec_type_from_file_location!</span>\n  <span class=\"token comment\">#config.expect_with(:rspec) { https://robots.thoughtbot.com/how-we-test-rails-applications|c| c.syntax = :should }</span>\n \n<span class=\"token keyword\">end</span></code></pre></div>\n<p>【附录2】单元测试用例</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'rails_helper'</span>\n\n<span class=\"token constant\">RSpec</span><span class=\"token punctuation\">.</span>describe <span class=\"token constant\">Admin</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">Article</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:model</span> <span class=\"token keyword\">do</span>\n\n\tcontext <span class=\"token string\">\"will vaild\"</span> <span class=\"token keyword\">do</span>\n\t\tit <span class=\"token string\">\"when all field filled\"</span> <span class=\"token keyword\">do</span>\n\t\t\tarticle <span class=\"token operator\">=</span> build<span class=\"token punctuation\">(</span><span class=\"token symbol\">:article</span><span class=\"token punctuation\">)</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to be_valid\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n\n\tcontext <span class=\"token string\">\"will not vaild\"</span> <span class=\"token keyword\">do</span>\n\t\tit <span class=\"token string\">\"when artile category id is empty\"</span> <span class=\"token keyword\">do</span>\n\t\t\tarticle <span class=\"token operator\">=</span> build<span class=\"token punctuation\">(</span><span class=\"token symbol\">:article</span><span class=\"token punctuation\">,</span> article_category_id<span class=\"token punctuation\">:</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not_to be_valid\n\t\t\texpect<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">[</span><span class=\"token symbol\">:article_category_id</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to include <span class=\"token string\">\"不能为空\"</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\tit <span class=\"token string\">\"when title is empty\"</span> <span class=\"token keyword\">do</span>\n\t\t\tarticle <span class=\"token operator\">=</span> build<span class=\"token punctuation\">(</span><span class=\"token symbol\">:article</span><span class=\"token punctuation\">,</span> title<span class=\"token punctuation\">:</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not_to be_valid\n\t\t\texpect<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">[</span><span class=\"token symbol\">:title</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to include <span class=\"token string\">\"不能为空\"</span>\n\t\t<span class=\"token keyword\">end</span>\n\n\t\tit <span class=\"token string\">\"when content is empty\"</span> <span class=\"token keyword\">do</span>\n\t\t\tarticle <span class=\"token operator\">=</span> build<span class=\"token punctuation\">(</span><span class=\"token symbol\">:article</span><span class=\"token punctuation\">,</span> content<span class=\"token punctuation\">:</span> <span class=\"token keyword\">nil</span><span class=\"token punctuation\">)</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>not_to be_valid\n\t\t\texpect<span class=\"token punctuation\">(</span>article<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">.</span>messages<span class=\"token punctuation\">[</span><span class=\"token symbol\">:content</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to include <span class=\"token string\">\"不能为空\"</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>【附录3】集成测试用例</p>\n<div class=\"gatsby-highlight\" data-language=\"ruby\"><pre class=\"language-ruby\"><code class=\"language-ruby\"><span class=\"token keyword\">require</span> <span class=\"token string\">'rails_helper'</span>\n\n<span class=\"token constant\">RSpec</span><span class=\"token punctuation\">.</span>describe <span class=\"token string\">\"PageTests\"</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:request</span> <span class=\"token keyword\">do</span>\n\tdescribe <span class=\"token string\">\"GET /page_tests\"</span> <span class=\"token keyword\">do</span>\n\t\tlet<span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token symbol\">:admin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token variable\">@user</span> <span class=\"token operator\">=</span> create<span class=\"token punctuation\">(</span><span class=\"token symbol\">:user</span><span class=\"token punctuation\">,</span> password<span class=\"token punctuation\">:</span> <span class=\"token string\">\"admin1234\"</span><span class=\"token punctuation\">)</span>\n\t\t\tlogin_as <span class=\"token variable\">@user</span><span class=\"token punctuation\">,</span> scope<span class=\"token punctuation\">:</span> <span class=\"token symbol\">:user</span><span class=\"token punctuation\">,</span> <span class=\"token symbol\">:run_callbacks</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token keyword\">false</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\tit <span class=\"token string\">\"safely workflow\"</span> <span class=\"token keyword\">do</span>\n\t\t\tvisit admin_pages_path\n\t\t\texpect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_content<span class=\"token punctuation\">(</span><span class=\"token string\">\"文档管理\"</span><span class=\"token punctuation\">)</span>\n\t\t\tclick_link <span class=\"token string\">'添加'</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_content<span class=\"token punctuation\">(</span><span class=\"token string\">\"编辑文档\"</span><span class=\"token punctuation\">)</span>\n\t\t\tfill_in <span class=\"token string\">'admin_page_title'</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"测试文档标题\"</span>\n\t\t\tfill_in <span class=\"token string\">'admin_page_abstract'</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"测试文档摘要\"</span>\n\t\t\tfill_in <span class=\"token string\">'admin_page_content'</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"测试文档内容\"</span>\n\t\t\tclick_button <span class=\"token string\">'提交'</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_content<span class=\"token punctuation\">(</span><span class=\"token string\">\"文档添加成功。\"</span><span class=\"token punctuation\">)</span>\n\t\t\tclick_link <span class=\"token string\">'修改'</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_selector<span class=\"token punctuation\">(</span><span class=\"token string\">\"input[value='测试文档标题']\"</span><span class=\"token punctuation\">)</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_field<span class=\"token punctuation\">(</span><span class=\"token string\">'admin_page_abstract'</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token string\">'测试文档摘要'</span><span class=\"token punctuation\">)</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_field<span class=\"token punctuation\">(</span><span class=\"token string\">'admin_page_content'</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token string\">'测试文档内容'</span><span class=\"token punctuation\">)</span>\n\t\t\tfill_in <span class=\"token string\">'admin_page_title'</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"修改测试文档标题\"</span>\n\t\t\tfill_in <span class=\"token string\">'admin_page_abstract'</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"修改测试文档摘要\"</span>\n\t\t\tfill_in <span class=\"token string\">'admin_page_content'</span><span class=\"token punctuation\">,</span> with<span class=\"token punctuation\">:</span> <span class=\"token string\">\"修改测试文档内容\"</span>\n\t\t\tclick_button <span class=\"token string\">'提交'</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_content<span class=\"token punctuation\">(</span><span class=\"token string\">\"文档更新成功。\"</span><span class=\"token punctuation\">)</span>\n\t\t\tclick_link <span class=\"token string\">'返回'</span>\n\t\t\tclick_link <span class=\"token string\">'删除'</span>\n\t\t\texpect<span class=\"token punctuation\">(</span>page<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>to have_content<span class=\"token punctuation\">(</span><span class=\"token string\">\"文档删除成功。\"</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">end</span>\n\t<span class=\"token keyword\">end</span>\n<span class=\"token keyword\">end</span></code></pre></div>\n<p>【附录4】参考播客</p>\n<p>1】.<a href=\"https://semaphoreapp.com/blog/2013/08/14/setting-up-bdd-stack-on-a-new-rails-4-application.html\">Setting up the BDD stack on a new Rails 4 application</a></p>\n<p>2】.<a href=\"https://robots.thoughtbot.com/how-we-test-rails-applications\">How We Test Rails Applications</a></p>\n<p>3】.<a href=\"https://github.com/jekyll/jekyll-help\">Installing RSpec and Capybara in Rails 4.1</a></p>","frontmatter":{"date":"March 03, 2015","path":"/rspec-and-capybara-with-rails","title":"Rspec and Capybara with Rails"}}},"pageContext":{}}