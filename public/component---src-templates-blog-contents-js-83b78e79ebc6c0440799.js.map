{"version":3,"sources":["webpack:///./src/templates/blog/components/header.js","webpack:///./src/templates/blog/contents.js"],"names":["BlogHeader","react_default","a","createElement","class","href","BlogContentsTamplate","_ref","pageContext","data","prevPage","nextPage","posts","allMarkdownRemark","edges","link","page","text","PATH","className","Fragment","map","_ref2","_node$frontmatter","node","frontmatter","path","category","date","title","summary","__webpack_require__","d","__webpack_exports__","pageQuery"],"mappings":"qHAEe,SAASA,IACtB,OACEC,EAAAC,EAAAC,cAAA,UAAQC,MAAM,eACZH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,WACTH,EAAAC,EAAAC,cAAA,KAAGC,MAAM,aAAaC,KAAK,UAA3B,aACAJ,EAAAC,EAAAC,cAAA,OAAKC,MAAM,YACTH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,IAAID,MAAM,cAElBH,EAAAC,EAAAC,cAAA,OAAKC,MAAM,sBCLN,SAASE,EAATC,GACZ,IAD6CC,EAC7CD,EAD6CC,YAAaC,EAC1DF,EAD0DE,KAGnDC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,SACZC,EAAQH,EAAKI,kBAAkBC,MAE/BC,EAAO,SAACC,EAAMC,GAClB,GAAID,EAAM,CACR,IAAMD,EAAiB,IAATC,EANL,SAM4BE,UAAQF,EAC7C,OAAQf,EAAAC,EAAAC,cAAA,KAAGgB,UAAU,kBAAkBd,KAAMU,GAAOE,GAEtD,OAAQhB,EAAAC,EAAAC,cAAA,QAAMgB,UAAU,4BAA4BF,IAGtD,OACEhB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAkB,SAAA,KACEnB,EAAAC,EAAAC,cAACH,EAAD,MACAC,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,gBACblB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,WACblB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,QACblB,EAAAC,EAAAC,cAAA,MAAIgB,UAAU,aACXP,EAAMS,IAAI,SAAAC,GAAc,IAAAC,EAAAD,EAAXE,KAC0CC,YAA9CC,EADeH,EACfG,KAAMC,EADSJ,EACTI,SAAUC,EADDL,EACCK,KAAMC,EADPN,EACOM,MAAOC,EADdP,EACcO,QAC/Bf,EAAUG,UAAQS,EAAd,IAA0BD,EAA1B,IACV,OACEzB,EAAAC,EAAAC,cAAA,MAAIgB,UAAU,QACZlB,EAAAC,EAAAC,cAAA,QAAMgB,UAAU,aAAcS,GAC9B3B,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGgB,UAAU,YAAYd,KAAMU,GAAQc,IAEzC5B,EAAAC,EAAAC,cAAA,KAAGgB,UAAU,gBAAiBW,OAKtC7B,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,+BACblB,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,QACXJ,EAAKL,EAAU,aAEnBT,EAAAC,EAAAC,cAAA,OAAKgB,UAAU,SACXJ,EAAKJ,EAAU,cA7CjCoB,EAAAC,EAAAC,EAAA,4BAAA3B,IAAAyB,EAAAC,EAAAC,EAAA,8BAAAC,IAuDO,IAAMA,EAAS","file":"component---src-templates-blog-contents-js-83b78e79ebc6c0440799.js","sourcesContent":["import React from \"react\"\n\nexport default function BlogHeader () {\n  return (\n    <header class=\"site-header\">\n      <div class=\"wrapper\">\n        <a class=\"site-title\" href=\"/posts\">Eten Wang</a>\n        <nav class=\"site-nav\">\n          <a href=\"#\" class=\"menu-icon\">\n          </a>\n          <div class=\"trigger\">\n          </div>\n        </nav>\n      </div>\n    </header>\n  )\n}","import React from \"react\"\nimport { graphql } from \"gatsby\"\nimport BlogHeader from \"./components/header\"\nimport './blog.scss';\n\nexport default function BlogContentsTamplate ({ pageContext, data, // this prop will be injected by the GraphQL query below.\n}) {\n  const PATH = '/posts'\n  const { prevPage, nextPage } = pageContext\n  const posts = data.allMarkdownRemark.edges\n\n  const link = (page, text) => {\n    if (page) {\n      const link = (page === 1 ? PATH : `${PATH}/${page}`) // rewrite page 1 to posts.\n      return (<a className=\"pagination-item\" href={link}>{text}</a>)\n    }\n    return (<span className=\"pagination-item disabled\">{text}</span>)\n  }\n\n  return (\n    <>\n      <BlogHeader></BlogHeader>\n      <div className=\"page-content\">\n        <div className=\"wrapper\">\n          <div className=\"home\">\n            <ul className=\"post-list\">\n              {posts.map(({ node }) => {\n                const { path, category, date, title, summary } = node.frontmatter\n                const link = `${PATH}/${category}/${path}/`\n                return (\n                  <li className=\"post\">\n                    <span className=\"post-meta\">{ date }</span>\n                    <h2>\n                      <a className=\"post-link\" href={link}>{ title }</a>\n                    </h2>\n                    <p className=\"post-summary\">{ summary }</p>\n                  </li>\n                )\n              })}\n            </ul>\n            <div className=\"pagination clearfix mb1 mt4\">\n              <div className=\"left\">\n                { link(prevPage, 'Previous') }\n              </div>\n              <div className=\"right\">\n                { link(nextPage, 'Next') }\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\nexport const pageQuery = graphql`\n  query($limit: Int!, $offset: Int!) {\n    allMarkdownRemark(\n      sort: { fields: [frontmatter___date], order: DESC }\n      limit: $limit\n      skip: $offset\n    ) {\n      edges {\n        node {\n          frontmatter {\n            path\n            category\n            title\n            date(formatString: \"MMMM DD, YYYY\")\n            summary\n          }\n        }\n      }\n    }\n  }\n`"],"sourceRoot":""}